{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SA2BA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAACN,WAAUC,UAEnBM,EAAO,CAACP,WAAUC,S,GAEnBA,E,IAlCSQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEzB,SAAkBC,GAChBA,EAAIC,iBACJ,IAAIC,EAAUC,OAAON,SAASC,cAAc,kBAAkBM,OAC1DC,EAAUF,OAAON,SAASC,cAAc,iBAAiBM,OACzDE,EAAYH,OAAON,SAASC,cAAc,mBAAmBM,OACjE,GAAIF,EAAW,GAAKG,EAAU,GAAMC,EAAY,EAE9C,YADAC,EAAAtB,GAASuB,OAAOC,QAAQ,sCAAuC,CAACrB,SAAU,kBAG5E,IAAK,IAAIA,EAAW,EAAGA,EAAWkB,EAAWlB,GAAU,EACrDD,EAAcC,EAAUc,GACvBQ,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBkB,EAAAtB,GAASuB,OAAOI,QAAQ,uBAAsCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,MAAK,CAACD,SAAU,iB,IAErF0B,OAAM,SAAAH,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBkB,EAAAtB,GAASuB,OAAOC,QAAQ,sBAAqCI,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,MAAK,CAACD,SAAU,iB,IAErFc,GAAYG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', onSubmit)\n\nfunction onSubmit(evt){\n  evt.preventDefault();\n  let delayVal =Number(document.querySelector('[name=\"delay\"]').value);\n  let stepVal = Number(document.querySelector('[name=\"step\"]').value);\n  let amountVal = Number(document.querySelector('[name=\"amount\"]').value);\n  if (delayVal < 0 || stepVal < 0  || amountVal < 1) {\n    Notiflix.Notify.failure('All values must be bigger than zero', {position: 'center-center'});\n    return;\n  }\n  for (let position = 0; position < amountVal; position+=1) {\n    createPromise(position, delayVal)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {position: 'center-center'});\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {position: 'center-center'});\n    });\n    delayVal += stepVal;\n  };\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay})\n      } else {\n        reject({position, delay})\n      }\n    }, delay)\n  })\n}"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","evt","preventDefault","delayVal","Number","value","stepVal","amountVal","$parcel$interopDefault","Notify","failure","then","param","success","concat","catch"],"version":3,"file":"03-promises.c83d3fea.js.map"}